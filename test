local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Vernyfx/DTUTWO/main/UILibrary"))()
print("bro")
Library.call()

local Window = Library.create({
    Title = "Wing Hub",
    Name = "Anime Switch",
    Code = "2MDPsA8WWs" -- discord invite
})

_G.Settings = {

}

if not isfolder('WingHub_'..game.Players.LocalPlayer.Name) then
    makefolder('WingHub_'..game.Players.LocalPlayer.Name)
end

local Folder = 'WingHub_'..game.Players.LocalPlayer.Name

if not isfolder(Folder .. "/" .. game.GameId) then
    makefolder(Folder .. "/" .. game.GameId)
end

local GameFolder = Folder .. "/" .. game.GameId

if not isfile(GameFolder .. "/Settings.json") then
    writefile(GameFolder .. "/Settings.json","[]")
end

local File = GameFolder .. "/Settings.json"

function CreateTab(Title,Description)
    return Window.tab({Title = Title,Desc = Description})
end

function CreateSection(Tab,Name)
    return Tab.page({Title = Name})
end

local Toggles = {}
_G.SF = {}
local insertedNumbers = {}

function CreateToggle(Section, Name, SettingsValue, DoFunction, DontSpawn, DoAfterDestroy)
    local ToggleNum = #Toggles + 1
    local randomNum = 0
    table.insert(Toggles, ToggleNum)
    
    repeat

        randomNum = math.random(55,22222)
        task.wait(.01)

    until not table.find(insertedNumbers, randomNum)

    table.insert(insertedNumbers, randomNum)

    local Toggle = Section.Toggle({Title = Name, ValueName = SettingsValue, Default = _G.Settings[SettingsValue], callback = function(Value)
        _G.Settings[SettingsValue] = Value
        Library:Savefile(_G.Settings)

        if not _G.SF[randomNum] and _G.Settings[SettingsValue] then

            _G.SF[randomNum] = true

            if not DontSpawn then

                local ab = task.spawn(DoFunction)

                repeat
                    task.wait(.1)
                until not _G.Settings[SettingsValue]

                task.cancel(ab)

                _G.SF[randomNum] = false

                if DoAfterDestroy then
                    task.spawn(DoAfterDestroy)
                end

            end

        end
    end})

    return Toggle
end

function CreateDropdown(Section,Name,SettingsValue,Options,DoFunction,Function)

    local Dropdown = Section.Dropdown({
        Title = Name,
        ValueName = SettingsValue,
        Item = Options,
        Default = _G.Settings[SettingsValue],
        callback = function(Value)
            _G.Settings[SettingsValue] = Value
            Library:Savefile(_G.Settings)

            if DoFunction then
                task.spawn(Function)
            end
        end
    })

    return Dropdown
end

function CreateMultiDropdown(Section,Name,SettingsValue,Options,DoFunction,Function)

    local MultiDropdown = Section.MultiDropdown({
        Title = Name,
        ValueName = SettingsValue,
        Item = Options,
        Default = _G.Settings[SettingsValue],
        callback = function(Value)
            _G.Settings[SettingsValue] = Value
            Library:Savefile(_G.Settings)

            if DoFunction then
                task.spawn(Function)
            end
        end
    })

    return MultiDropdown
end

function CreateInput(Section,Name,SettingsValue,PlaceholderText,DoFunction,Function)

    local Input = Section.TextBox({
        Title = Name,
        ValueName = SettingsValue,
        Holder = PlaceholderText,
        callback = function(Value)
            _G.Settings[SettingsValue] = Value
            Library:Savefile(_G.Settings)

            if DoFunction then
                task.spawn(Function)
            end
        end
    })

    return Input
end

function CreateButton(Section,Name,Function)
    local Button = Section.Button({
        Title = Name,
        callback = function()
            task.spawn(Function)
        end
    })

    return Button
end

function CreateSlider(Section, Name, SettingsValue,OptionsTable, DoFunction, Function)
    if type(OptionsTable) == "table" then

        local Slider = Section.Slider({
            Title = Name,
            ValueName = SettingsValue,
            Max = OptionsTable["Max"],
            Min = OptionsTable["Min"],
            Dec = OptionsTable["Decimals"],
            Default = _G.Settings[SettingsValue],
            callback = function(Value)
                _G.Settings[SettingsValue] = Value
                Library:Savefile(_G.Settings)

                if DoFunction then
                    task.spawn(Function)
                end
            end
        })

        return Slider

    end
end

function CreateLabel(Section,Name)
    local Label = Section.Label({
        Title = Name
    })
    
    return Label
end

function CreateParagraph(Section,Name,Description)
    local Par = Section.Paragraph({
        Title = Name,
        Desc = Description
    })
    
    return Par
end

function CreateNotification(Name,Description,Time)
    return Library.Notification({Title = Name,Desc = Description,Time})
end

local MainTab = CreateTab("Main","Auto Farm")

local SettingsSection = CreateSection(MainTab,"Settings")

_G.SelectedNumber = CreateDropdown(SettingsSection,"Select a Number","SelectedNumber",{"1","2","3","4","5"},false)

_G.SelectedNumbers = CreateMultiDropdown(SettingsSection,"Select Numbers","SelectedNumbers",{"1","2","3","4","5"},false)

_G.AutoPrintNumbers = CreateToggle(SettingsSection,"Auto Print Selected Numbers","AutoPrintNumbers",function()
    print(_G.Settings.SelectedNumber)
end)

_G.SelectedCooldown = CreateSlider(SettingsSection, "Cooldown Slider", "SelectedCooldown",{Max = 25,Min = 5,Decimals = 0}, false)

_G.WebhookInput = CreateInput(SettingsSection,"Input Webhook","WebhookInput","Webhook Here",false)

CreateButton(SettingsSection,"Set Values",function()
	print(_G.Settings.WebhookInput)
end)

local MiscTab = CreateTab("Misc","Performance Features")

local OthersSection = CreateSection(MiscTab,"Others")

Library:LoadConfig(File)

print("gg")
